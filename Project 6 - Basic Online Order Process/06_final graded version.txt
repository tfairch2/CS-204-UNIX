#***************************
# This project was broken up into 3 modules
#
#
# This is Module 1 and it tests user input against field 1 of  the file:
#       "name_dept_psswd.txt"
#
# three incorrect tries and exit code 20 is generated
#
#***************************
#
#!/bin/bash
clear
i=1
#assign a counter variable, 'i', to keep track of the user's guesses
while [ $i -le 3 ]
do


#Prompt the user to enter their name and assign it to the variable 'name'
printf "Enter username: "; read "name"


#check the the text file for a match with the user input
TEST=`awk '$1 ~ \/'${name}'/ {print 0}' ./name_dept_psswd.txt`


#if the user entry matches the preset name, display that they are correct then exit the program
if [ "$TEST" == 0  ]; then printf "Correct\n\n"; exit 10


#if the user has tried 3 times, exit the program
elif [ $i == 4 ]; then exit 20


#inform the user that their guess was wrong and indicate the number of times that they have tried
#       using the counter variable
else printf  "Incorrect, that was attempt "$i"\n\n"


#for each incorrect guess, increment the counter variable.  After their third incorrect attempt, the program
#       will exit because at that point the counter will be equal to 4
        i=$((i+1))
fi
done

#***********************************************************
#Module 2
#
# Input by user of their selection of item, either by the first letter/number of it's description.
#  The variable 'char' is used for this entry and it must be upper case letter or number.
#  
#  If lower case letter, convert it to upper case.  The field we are searching is $3.  All entries begin
#       with either a number or UpperCase Letter.
#
# My intention was to my variable 'char' to print the list of products that the
#       user could order.
#
# I had the same results when using a separate CASE statement for numbers
#       as I had when using one CASE statement for numbers and letters.
#
# This module merely exits regardless of what the user inputs.
#
#************************************************************


#The user input is the variable 'char' because we are only using a single charater
read char

#************************************************************
# If 'char' is a lower case letter, convert it to upper case.
#      If 'char' is an upper case letter or is a number, print fields 1 and 3 from the product file
#      NSN_DATA
#************************************************************
case $char in
        [a-zA-Z0-9])
        echo $char | tr [:lower:] [:upper:]
        awk -F : '$3 ~ /^$char/ { print $1 $3 }' NSN_DATA
        ;;

#If 'char' is neither a letter nor a number, exit the program
        *)
        echo $char "   is an incorrect input"
        exit 10
        ;;
esac


#************************************************************
#Module 3
#
#Allow the user to order the item they want.
#
#This module will calculate the Total Price based on unit price
# and the quantity ordered, but I couldn't get the functionality 
# of extracting the product information from the file NSN_DATA and 
# so I have not attempted to include the limitation of $5000 on the total
# amount allowed.  It exists here merely as a prompt.
#
#************************************************************

#prompt user for the item number of the product they will be ordering, reminding them of their spending limit
echo "The total amount of your order is restricted to \$5000"
echo -n "Enter the line number for the item that you want: "


#assign their input to the variable 'item'
read item


#ask user for the desired amount of items and assign their entry to the variable 'Q'
echo -n "How many items do you wish to order:  "
read Q


#************************************************************
#
# Once the user enters the line item for the product they want, The default
# field separator is changed to a colon and the user entry is assigned to the
# variable NR, record number of their product.  Field 4 of the record is
# assigned to the variable 'price'.
#
# I have been unsuccessful in correctly extracting the record number.
#************************************************************

price=$(awk -F : 'NR == $item {print $4}' NSN_DATA)


#calculate the amount of their purchase and assign the result to the variable 'TOTAL'
TOTAL=`echo "scale=3;$price*$Q"|bc`


#************************************************************
#if the amount of their purchase, TOTAL, exceeds their spending limit, $5000,
#       then subtract one item at a time until the value of TOTAL drops below 5000.
#This portion gives the message "integer value expected" and I haven't been able
#       to resolve it
#
#************************************************************
while [ $TOTAL -gt 5000 ]
do

#subtract one item at a time from QUANTITY and recalculate TOTAL as described above
        let Q=Q-1
        let TOTAL=`echo "$price * $Q"|bc`


#************************************************************
#
#once the user's order no longer exceeds their spending limit,
#       stop recalculating and display the unit price,
#       the allowable number of items the user may order and
#       the new total of the order.
#
#************************************************************
done
echo  "The price per unit is \$$price, and the quantity is $Q for a total of \$$TOTAL"
